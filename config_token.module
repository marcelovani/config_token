<?php

/**
 * @file
 * config_token module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function config_token_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.config_token') {
    $filepath = dirname(__FILE__) . '/README.md';
    $readme = file_get_contents($filepath);
    $output = '<pre>' . $readme . '</pre>';

    return $output;
  }
}

/**
 * Implements hook_token_info().
 */
function config_token_token_info() {
  $tokens = array();
  $types = array(
    'name' => t('Config Token'),
    'description' => t('Custom tokens stored in configuration manager.'),
  );

  // Populate config tokens.
  $config = \Drupal::config('config_token.settings');
  $allowedTokens = $config->get('allowed_tokens');

  foreach ($allowedTokens as $key => $item) {
    // Populate values from the configuration.
    $tokens[$key] = array(
      'name' => Html::escape($item['name']),
      'description' => Html::escape($item['description'])
    );
  }

  return array(
    'types' => array('config_token' => $types),
    'tokens' => array('config_token' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 *
 */
function config_token_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'config_token') {
    $config = \Drupal::config('config_token.settings');
    $allowedTokens = $config->get('allowed_tokens');

    $config = \Drupal::config('config_token.tokens');
    $replacementValues = $config->get('replacements');
    foreach ($tokens as $name => $original) {
      // We should always replace allowed tokens regardless of whether they have a value.
      if (isset($allowedTokens[$name])) {
        $format_id = isset($allowedTokens[$name]['format_id']) ? $allowedTokens[$name]['format_id'] : 'plain_text';
        $replacements[$original] = isset($replacementValues[$name]) ? check_markup($replacementValues[$name], $format_id) : '';
      }
    }

    return $replacements;
  }
}
